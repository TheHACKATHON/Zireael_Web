<Application x:Class="Client.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Client"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             xmlns:converters1="clr-namespace:Client.Converters"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DialogHost.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Grey.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Blue.xaml" />

            </ResourceDictionary.MergedDictionaries>

            <Storyboard x:Key="OpenSubMenuStoryboard">

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                    <EasingDoubleKeyFrame Value="150" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

            </Storyboard>

            <Storyboard x:Key="CloseSubMenuStoryboard">

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                    <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="150" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.18" Value="{x:Static Visibility.Collapsed}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>


            <Storyboard x:Key="OpenMainSubMenuStoryboard">

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                    <EasingDoubleKeyFrame Value="-150" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>


            </Storyboard>

            <Storyboard x:Key="CloseMainSubMenuStoryboard">

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                    <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="-150" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.18" Value="{x:Static Visibility.Collapsed}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="OpenMainGridStoryboard">
                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="CloseMainGridStoryboard">
                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.18" Value="{x:Static Visibility.Collapsed}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="OpenStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="ExitStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.11" />
                    <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.18">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Brush x:Key="ContactDisabledBackground">#174266</Brush>

            <Style TargetType="Grid" x:Key="DialogGrid">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0" ScaleY="0" CenterX="150"  CenterY="150"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth5"/>
            </Style>

            <Style TargetType="Grid" x:Key="DialogBackgroundGrid">
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Opacity" Value="0.5"/>
                <Setter Property="Visibility" Value="Collapsed"></Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding}" Value="True">
                        <Setter Property="Visibility" Value="Visible"></Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Brush x:Key="ButtonMouseOverBackground">#202026</Brush>

            <Brush x:Key="DialogBackground">#232e3c</Brush>
            <Brush x:Key="DialogItemBackground">#17212b</Brush>
            <Brush x:Key="DialogForeground">#f5f5f5</Brush>
            <Brush x:Key="DialogIconsForeground">#6c7883</Brush>
            <Brush x:Key="DialogSelectedBackground">#232e3c</Brush>
            <Brush x:Key="DialogSecondForeground">#708499</Brush>
            <Brush x:Key="DialogHeaderForeground">#ebebeb</Brush>
            <Brush x:Key="DialogButtonSelectedBackground">#1d2a39</Brush>

            <Brush x:Key="DialogSubMenuButtonForeground">#6ab2f2</Brush>

            <Brush x:Key="DialogLoginEnabledForeground">#5598db</Brush>
            <Brush x:Key="DialogLoginDisabledForeground">#792f2b</Brush>

            <!--#region header-->

            <system:Double x:Key="HeaderHeight">22</system:Double>
            <system:Double x:Key="HeaderButtonWidth">25</system:Double>

            <GridLength x:Key="HeaderHeightGridLength">22</GridLength>

            <Brush x:Key="HeaderBackground">#242f3d</Brush>
            <Brush x:Key="HeaderButtonForeground">#576673</Brush>
            <Brush x:Key="HeaderExitButtonMouseOverForeground">#ffffff</Brush>
            <Brush x:Key="HeaderExitButtonMouseOverBackground">Red</Brush>
            <Brush x:Key="HeaderButtonMouseOverBackground">#2c3847</Brush>
            <Brush x:Key="HeaderButtonMouseOverForeground">#e0e0e0</Brush>

            <Style TargetType="Button" x:Key="HeaderButtonStyle">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource HeaderButtonForeground}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource HeaderButtonMouseOverBackground}"/>
                        <Setter Property="Foreground" Value="{StaticResource HeaderButtonMouseOverForeground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Button" x:Key="HeaderExitButtonStyle">
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{StaticResource HeaderButtonForeground}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource HeaderExitButtonMouseOverBackground}"/>
                        <Setter Property="Foreground" Value="{StaticResource HeaderExitButtonMouseOverForeground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <ControlTemplate TargetType="Button" x:Key="HeaderButtonTemplate">
                <Grid>
                    <Rectangle Fill="{TemplateBinding Background}"/>
                    <Label Padding="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="Center" 
                           VerticalContentAlignment="Center" Margin="0" Content="{TemplateBinding Content}" 
                           Foreground="{TemplateBinding Foreground}"/>
                </Grid>
            </ControlTemplate>

            <!--#endregion-->

            <!--#region login-->

            <system:Double x:Key="LoginFontSize">16</system:Double>
            <FontWeight x:Key="LoginFontWeight">DemiBold</FontWeight>

            <Brush x:Key="LoginButtonMouseOverBackground">#3476ab</Brush>
            <Brush x:Key="LoginButtonBackground">#2f6ea5</Brush>
            <Brush x:Key="LoginForeground">#f5f5f5</Brush>
            <Brush x:Key="LoginGridBackground">#17212b</Brush>

            <Style TargetType="TextBox" x:Key="LoginTextBoxStyle" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
                <Setter Property="FontSize" Value="{StaticResource LoginFontSize}"/>
                <!--<Setter Property="FontWeight" Value="{StaticResource LoginFontWeight}"/>-->
                <Setter Property="Foreground" Value="{StaticResource LoginForeground}"/>
                <Setter Property="Width" Value="230"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="Margin" Value="10"/>
            </Style>

            <Style TargetType="PasswordBox" x:Key="LoginPasswordBoxStyle" BasedOn="{StaticResource MaterialDesignFloatingHintPasswordBox}">
                <Setter Property="FontSize" Value="{StaticResource LoginFontSize}"/>
                <!--<Setter Property="FontWeight" Value="{StaticResource LoginFontWeight}"/>-->
                <Setter Property="Foreground" Value="{StaticResource LoginForeground}"/>
                <Setter Property="Width" Value="230"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="Margin" Value="10"/>
            </Style>

            <Style TargetType="Button" x:Key="LoginButtonStyle">
                <Setter Property="Margin" Value="10"/>
                <Setter Property="Width" Value="230"/>
                <Setter Property="Height" Value="45"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="Foreground" Value="{StaticResource LoginForeground}"/>
                <Setter Property="Background" Value="{StaticResource LoginButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource LoginButtonBackground}"/>
                <Setter Property="IsDefault" Value="False"/>

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Visibility,ElementName=LoginGrid}" Value="Visible">
                        <Setter Property="IsDefault" Value="True"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="TextBlock" x:Key="RegisterTextBlockStyle">
                <Setter Property="TextDecorations" Value="{x:Null}"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="FontWeight" Value="Light"/>
                <Setter Property="Foreground" Value="{StaticResource DialogSubMenuButtonForeground}"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="TextDecorations" Value="Underline"/>
                    </Trigger>
                    <DataTrigger Binding="{Binding Visibility,ElementName=LoginProgressBar}" Value="Visible">
                        <Setter Property="Visibility" Value="Hidden"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!--#endregion-->

            <Style x:Key="MenuVisibleOnLeftSide" TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
                <Setter Property="Visibility" Value="Visible"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsRight}" Value="True">
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}" x:Key="MenuVisibleOnSingleGroup">
                <Setter Property="Visibility" Value="Collapsed"></Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Group.Type}" Value="0">
                        <Setter Property="Visibility" Value="Visible"></Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}" x:Key="MenuVisibleOnMultyGroup">
                <Setter Property="Visibility" Value="Visible"></Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Group.Type}" Value="0">
                        <Setter Property="Visibility" Value="Collapsed"></Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <!--#region group-->

            <Brush x:Key="GroupsBackground">#17212b</Brush>
            <Brush x:Key="GroupsForeground">#6c7883</Brush>
            <Brush x:Key="GroupSearchForeground">#f5f5f5</Brush>
            <Brush x:Key="GroupSelectedBackground">#2b5278</Brush>
            <Brush x:Key="GroupSelectedForeground">#ffffff</Brush>
            <Brush x:Key="GroupMouseOverBackground">#202b36</Brush>
            <Brush x:Key="GroupNameForeground">#f5f5f5</Brush>
            <Brush x:Key="GroupTextForeground">#7f91a4</Brush>
            <Brush x:Key="GroupFileForeground">#73b9f5</Brush>
            <Brush x:Key="GroupUnreadMessageBackground">#3e546a</Brush>
            <Brush x:Key="GroupUnreadMessageForeground">#ffffff</Brush>


            <Style TargetType="TextBlock" x:Key="GroupTextStyle">
                <Setter Property="Foreground" Value="{StaticResource GroupTextForeground}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsSelectedGroup}" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource GroupSelectedForeground}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!--#endregion-->

            <!--#region group info-->

            <Brush x:Key="GroupInfoIconsForeground">#6c7883</Brush>
            <Brush x:Key="GroupInfoBackground">#17212b</Brush>

            <!--#endregion-->

            <!--#region messages-->

            <Brush x:Key="SendMessageButtonForeground">#5288c1</Brush>
            <Brush x:Key="MessagesBackground">#0e1621</Brush>
            <Brush x:Key="MessageTypeTextBoxBackground">#17212b</Brush>
            <Brush x:Key="MessageTypeTextBoxForeground">#f5f5f5</Brush>
            <Brush x:Key="MessageSelectedBackground">#2972ad</Brush>
            <Brush x:Key="MyMessageBackground">#2b5278</Brush>
            <Brush x:Key="MessageForeground">#f5f5f5</Brush>
            <Brush x:Key="MessageOtherTextForeground">#6d7f8f</Brush>
            <Brush x:Key="MyMessageIconsForeground">#6bbfff</Brush>
            <Brush x:Key="OtherMessageBackground">#182533</Brush>
            <Brush x:Key="SystemMessageBackground">#1e2c3a</Brush>
            <Brush x:Key="SystemMessageForeground">#ffffff</Brush>
            <Brush x:Key="FileMessageBackground">#4c9ce2</Brush>
            <Brush x:Key="FileMessageForeround">#ffffff</Brush>
            <Brush x:Key="FileMessageMouseOverBackground">#54a4e9</Brush>


            <Style TargetType="Grid" x:Key="HideWhenGroupUnselectedStyle">
                <Setter Property="Visibility" Value="Visible"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding SelectedGroupId}" Value="-1">
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!--#endregion-->

            <!--#region menu-->

            <Brush x:Key="SideMenuUpBackground">#276899</Brush>
            <Brush x:Key="SideMenuDownBackground">#17212b</Brush>

            <!--#endregion-->

            <!--#region converters-->

            <converters1:DateTimeToStringDateConverter x:Key="DateConverter" />
            <converters1:TextMessageToMessageGridVisibleConverter x:Key="TextMessageToVisibleConverter" />
            <converters1:FileMessageToMessageGridVisibleConverter x:Key="FileMessageToVisibleConverter" />
            <converters1:DateTimeToLastTimeOnlineConverter x:Key="DateTimeToLastTimeOnline" />
            <converters1:FileNameConverter x:Key="FileNameConverter"/>
            <converters1:MessageToPreviewTextConverter x:Key="MessageToTextConverter"/>
            <converters1:PackagesToBytesCountConverter x:Key="PackagesToBytesConverter"/>
            <converters1:VerifyConvertrer x:Key="VerifyConvertrer"/>
            <converters1:DisplayNameToTextConverter x:Key="DisplayNameToTextConverter"/>
            <converters1:UserBlockedToMenuItemHeaderConvertrer x:Key="UserBlockedToMenuItemHeaderConvertrer"/>
            <converters1:UserInContactsToMenuItemHeaderConvertrer x:Key="UserInContactsToMenuItemHeaderConvertrer"/>
            <converters1:UsersCountConverter x:Key="UsersCountConverter"/>
            <converters1:GroupDisplayNameConverter x:Key="GroupDisplayNameConverter"/>
            
            <!--#endregion-->

            <!--#region buttons template-->

            <ControlTemplate x:Key="FlatButtonControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" 
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" 
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.23"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="FlatMenuButtonControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" 
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" 
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Background" Value="{StaticResource DialogSelectedBackground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.23"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="FlatSubMenuButtonControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" 
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" 
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource DialogSubMenuButtonForeground}"/>
                        <Setter Property="Background" Value="{StaticResource DialogButtonSelectedBackground}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource DialogSubMenuButtonForeground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.23"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="FlatCircleButtonControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                                     x:Name="border">
                        </Ellipse>
                    </AdornerDecorator>

                    <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    <materialDesign:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"  
                                    Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                    <ProgressBar x:Name="ProgressBar" 
                                     Style="{DynamicResource MaterialDesignCircularProgressBar}" 
                                     Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Minimum)}"
                                     Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Maximum)}"
                                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorForeground)}"
                                     Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}"
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Value)}"
                                     IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndeterminate)}"
                                     Opacity="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(materialDesign:ButtonProgressAssist.Opacity)}"
                                     Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                     Margin="-6" 
                                     Width="41"
                                     Height="41"
                                     HorizontalAlignment="Center" 
                                     VerticalAlignment="Center"
                                     RenderTransformOrigin=".5, .5">
                        <ProgressBar.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="0" ScaleY="0" />
                            </TransformGroup>
                        </ProgressBar.RenderTransform>
                    </ProgressBar>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource FileMessageMouseOverBackground}"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                    </Trigger>
                    <Trigger Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.2" From=".9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                    <DoubleAnimation Duration="0:0:0.2" From=".9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To=".9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To=".9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="FlatCircleButtonWithOutProgresBarControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                                     x:Name="border">
                        </Ellipse>
                    </AdornerDecorator>

                    <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    <materialDesign:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"  
                                    Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />

                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ButtonControlTemplate" TargetType="{x:Type Button}">
                <Grid>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" 
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" 
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="border" Value="{StaticResource LoginButtonMouseOverBackground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.23"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--#endregion-->

            <!--#region scroll-->

            <Brush x:Key="ScrollBarBackground">#2f3841</Brush>
            <Brush x:Key="ScrollBarForeground">#73797f</Brush>
            <system:Double x:Key="ScrollRadius">2.5</system:Double>
            <system:Double x:Key="ScrollWidth">6</system:Double>

            <Style  TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsFlicksEnabled" Value="True" />
                <Setter Property="Foreground" Value="{StaticResource ScrollBarForeground}" />
                <Setter Property="Background" Value="{StaticResource ScrollBarBackground}" />
                <Setter Property="Width" Value="{StaticResource ScrollWidth}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="GridRoot" Width="{StaticResource ScrollWidth}" Margin="0 3">
                                <Rectangle Fill="{StaticResource ScrollBarBackground}" RadiusX="{StaticResource ScrollRadius}" RadiusY="{StaticResource ScrollRadius}"/>
                                <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                    <Track.Thumb>
                                        <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}">
                                            <Thumb.Template>
                                                <ControlTemplate>
                                                    <Rectangle Fill="{TemplateBinding Foreground}" RadiusX="{StaticResource ScrollRadius}" RadiusY="{StaticResource ScrollRadius}"/>
                                                </ControlTemplate>
                                            </Thumb.Template>
                                        </Thumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                    </Track.DecreaseRepeatButton>
                                </Track>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                    <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>
                                <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                    <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="Orientation" Value="Horizontal">
                                    <Setter TargetName="GridRoot" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_Track" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Width" Value="Auto" />
                                    <Setter Property="Height" Value="12" />
                                    <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                    <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                    <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#endregion-->

            <Style TargetType="ContextMenu" BasedOn="{StaticResource MaterialDesignContextMenu}">
                <Setter Property="Background" Value="{StaticResource DialogBackground}"></Setter>
            </Style>

            <Style x:Key="MaterialDesignActionToggleButton1" TargetType="{x:Type ToggleButton}">
                <Style.Resources>
                    <ResourceDictionary>
                        <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                            <Setter Property="Width" Value="20" />
                            <Setter Property="Height" Value="20" />
                        </Style>
                    </ResourceDictionary>
                </Style.Resources>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Width" Value="32"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
                <Setter Property="materialDesign:ToggleButtonAssist.OnContent" Value="{StaticResource CheckMarkIcon}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                                <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              FlowDirection="LeftToRight"/>
                                    <Grid.Clip>
                                        <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}" 
                                                 RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                                    </Grid.RenderTransform>
                                </Grid>
                                <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ToggleButtonAssist.OnContentTemplate)}" />
                                    <Grid.Clip>
                                        <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}" 
                                                 RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}">
                                            <EllipseGeometry.Center>
                                                <MultiBinding Converter="{StaticResource PointValueConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                                </MultiBinding>
                                            </EllipseGeometry.Center>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                                    </Grid.RenderTransform>
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>