//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserBaseWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.ServiceReference1.UserWCF))]
    public partial class UserBaseWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastTimeOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastTimeOnline {
            get {
                return this.LastTimeOnlineField;
            }
            set {
                if ((this.LastTimeOnlineField.Equals(value) != true)) {
                    this.LastTimeOnlineField = value;
                    this.RaisePropertyChanged("LastTimeOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class UserWCF : Web.ServiceReference1.UserBaseWCF {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.GroupWCF[] GroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.GroupWCF[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Session {
            get {
                return this.SessionField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionField, value) != true)) {
                    this.SessionField = value;
                    this.RaisePropertyChanged("Session");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class GroupWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.UserBaseWCF CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.MessageWCF LastMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.MessageWCF[] MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.GroupType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.UserBaseWCF[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.UserBaseWCF Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.MessageWCF LastMessage {
            get {
                return this.LastMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.LastMessageField, value) != true)) {
                    this.LastMessageField = value;
                    this.RaisePropertyChanged("LastMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.MessageWCF[] Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.GroupType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.UserBaseWCF[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.ServiceReference1.MessageFileWCF))]
    public partial class MessageWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.UserBaseWCF SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsChanged {
            get {
                return this.IsChangedField;
            }
            set {
                if ((this.IsChangedField.Equals(value) != true)) {
                    this.IsChangedField = value;
                    this.RaisePropertyChanged("IsChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRead {
            get {
                return this.IsReadField;
            }
            set {
                if ((this.IsReadField.Equals(value) != true)) {
                    this.IsReadField = value;
                    this.RaisePropertyChanged("IsRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.UserBaseWCF Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupType", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    public enum GroupType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SingleUser = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultyUser = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Channel = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageFileWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class MessageFileWCF : Web.ServiceReference1.MessageWCF {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.FileChatWCF FileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.FileType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.FileChatWCF File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.FileType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileChatWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class FileChatWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPackagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountReadyPackagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LenghtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPackages {
            get {
                return this.CountPackagesField;
            }
            set {
                if ((this.CountPackagesField.Equals(value) != true)) {
                    this.CountPackagesField = value;
                    this.RaisePropertyChanged("CountPackages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountReadyPackages {
            get {
                return this.CountReadyPackagesField;
            }
            set {
                if ((this.CountReadyPackagesField.Equals(value) != true)) {
                    this.CountReadyPackagesField = value;
                    this.RaisePropertyChanged("CountReadyPackages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Lenght {
            get {
                return this.LenghtField;
            }
            set {
                if ((this.LenghtField.Equals(value) != true)) {
                    this.LenghtField = value;
                    this.RaisePropertyChanged("Lenght");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Image = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Package", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Package : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvatarWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.ServiceReference1.AvatarGroupWCF))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.ServiceReference1.AvatarUserWCF))]
    public partial class AvatarWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BigDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SmallDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] BigData {
            get {
                return this.BigDataField;
            }
            set {
                if ((object.ReferenceEquals(this.BigDataField, value) != true)) {
                    this.BigDataField = value;
                    this.RaisePropertyChanged("BigData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Format {
            get {
                return this.FormatField;
            }
            set {
                if ((object.ReferenceEquals(this.FormatField, value) != true)) {
                    this.FormatField = value;
                    this.RaisePropertyChanged("Format");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SmallData {
            get {
                return this.SmallDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SmallDataField, value) != true)) {
                    this.SmallDataField = value;
                    this.RaisePropertyChanged("SmallData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvatarGroupWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class AvatarGroupWCF : Web.ServiceReference1.AvatarWCF {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.GroupWCF GroupField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.GroupWCF Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvatarUserWCF", Namespace="http://schemas.datacontract.org/2004/07/Wcf_CeadChat_ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class AvatarUserWCF : Web.ServiceReference1.AvatarWCF {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Web.ServiceReference1.UserBaseWCF UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Web.ServiceReference1.UserBaseWCF User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICeadChatService", CallbackContract=typeof(Web.ServiceReference1.ICeadChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICeadChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Connect", ReplyAction="http://tempuri.org/ICeadChatService/ConnectResponse")]
        Web.ServiceReference1.UserWCF Connect(string sessionId, string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Connect", ReplyAction="http://tempuri.org/ICeadChatService/ConnectResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> ConnectAsync(string sessionId, string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CheckSession", ReplyAction="http://tempuri.org/ICeadChatService/CheckSessionResponse")]
        Web.ServiceReference1.UserWCF CheckSession(string session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CheckSession", ReplyAction="http://tempuri.org/ICeadChatService/CheckSessionResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> CheckSessionAsync(string session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Registration", ReplyAction="http://tempuri.org/ICeadChatService/RegistrationResponse")]
        bool Registration(Web.ServiceReference1.UserWCF newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Registration", ReplyAction="http://tempuri.org/ICeadChatService/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(Web.ServiceReference1.UserWCF newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LoginExist", ReplyAction="http://tempuri.org/ICeadChatService/LoginExistResponse")]
        bool LoginExist(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LoginExist", ReplyAction="http://tempuri.org/ICeadChatService/LoginExistResponse")]
        System.Threading.Tasks.Task<bool> LoginExistAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/EmailExist", ReplyAction="http://tempuri.org/ICeadChatService/EmailExistResponse")]
        bool EmailExist(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/EmailExist", ReplyAction="http://tempuri.org/ICeadChatService/EmailExistResponse")]
        System.Threading.Tasks.Task<bool> EmailExistAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LogIn", ReplyAction="http://tempuri.org/ICeadChatService/LogInResponse")]
        Web.ServiceReference1.UserWCF LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LogIn", ReplyAction="http://tempuri.org/ICeadChatService/LogInResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> LogInAsync(string login, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CreateGroup", ReplyAction="http://tempuri.org/ICeadChatService/CreateGroupResponse")]
        bool CreateGroup(Web.ServiceReference1.UserBaseWCF[] users, string nameGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CreateGroup", ReplyAction="http://tempuri.org/ICeadChatService/CreateGroupResponse")]
        System.Threading.Tasks.Task<bool> CreateGroupAsync(Web.ServiceReference1.UserBaseWCF[] users, string nameGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CreateChat", ReplyAction="http://tempuri.org/ICeadChatService/CreateChatResponse")]
        bool CreateChat(Web.ServiceReference1.UserBaseWCF user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/CreateChat", ReplyAction="http://tempuri.org/ICeadChatService/CreateChatResponse")]
        System.Threading.Tasks.Task<bool> CreateChatAsync(Web.ServiceReference1.UserBaseWCF user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Find", ReplyAction="http://tempuri.org/ICeadChatService/FindResponse")]
        Web.ServiceReference1.UserBaseWCF Find(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/Find", ReplyAction="http://tempuri.org/ICeadChatService/FindResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF> FindAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/FindAll", ReplyAction="http://tempuri.org/ICeadChatService/FindAllResponse")]
        Web.ServiceReference1.UserBaseWCF[] FindAll(string login, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/FindAll", ReplyAction="http://tempuri.org/ICeadChatService/FindAllResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> FindAllAsync(string login, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendMessage", ReplyAction="http://tempuri.org/ICeadChatService/SendMessageResponse")]
        int SendMessage(Web.ServiceReference1.MessageWCF message, long hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendMessage", ReplyAction="http://tempuri.org/ICeadChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<int> SendMessageAsync(Web.ServiceReference1.MessageWCF message, long hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/DeleteMessage", ReplyAction="http://tempuri.org/ICeadChatService/DeleteMessageResponse")]
        bool DeleteMessage(Web.ServiceReference1.MessageWCF message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/DeleteMessage", ReplyAction="http://tempuri.org/ICeadChatService/DeleteMessageResponse")]
        System.Threading.Tasks.Task<bool> DeleteMessageAsync(Web.ServiceReference1.MessageWCF message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddFriendsToGroup", ReplyAction="http://tempuri.org/ICeadChatService/AddFriendsToGroupResponse")]
        bool AddFriendsToGroup(Web.ServiceReference1.GroupWCF group, Web.ServiceReference1.UserBaseWCF[] friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddFriendsToGroup", ReplyAction="http://tempuri.org/ICeadChatService/AddFriendsToGroupResponse")]
        System.Threading.Tasks.Task<bool> AddFriendsToGroupAsync(Web.ServiceReference1.GroupWCF group, Web.ServiceReference1.UserBaseWCF[] friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddFriend", ReplyAction="http://tempuri.org/ICeadChatService/AddFriendResponse")]
        bool AddFriend(string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddFriend", ReplyAction="http://tempuri.org/ICeadChatService/AddFriendResponse")]
        System.Threading.Tasks.Task<bool> AddFriendAsync(string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveFriend", ReplyAction="http://tempuri.org/ICeadChatService/RemoveFriendResponse")]
        bool RemoveFriend(Web.ServiceReference1.UserBaseWCF friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveFriend", ReplyAction="http://tempuri.org/ICeadChatService/RemoveFriendResponse")]
        System.Threading.Tasks.Task<bool> RemoveFriendAsync(Web.ServiceReference1.UserBaseWCF friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetMessagesFromGroup", ReplyAction="http://tempuri.org/ICeadChatService/GetMessagesFromGroupResponse")]
        Web.ServiceReference1.MessageWCF[] GetMessagesFromGroup(Web.ServiceReference1.GroupWCF group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetMessagesFromGroup", ReplyAction="http://tempuri.org/ICeadChatService/GetMessagesFromGroupResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.MessageWCF[]> GetMessagesFromGroupAsync(Web.ServiceReference1.GroupWCF group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveGroup", ReplyAction="http://tempuri.org/ICeadChatService/RemoveGroupResponse")]
        bool RemoveGroup(Web.ServiceReference1.GroupWCF group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveGroup", ReplyAction="http://tempuri.org/ICeadChatService/RemoveGroupResponse")]
        System.Threading.Tasks.Task<bool> RemoveGroupAsync(Web.ServiceReference1.GroupWCF group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetPackageFromFile", ReplyAction="http://tempuri.org/ICeadChatService/GetPackageFromFileResponse")]
        Web.ServiceReference1.Package GetPackageFromFile(int messageId, int packNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetPackageFromFile", ReplyAction="http://tempuri.org/ICeadChatService/GetPackageFromFileResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.Package> GetPackageFromFileAsync(int messageId, int packNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendPackageToFile", ReplyAction="http://tempuri.org/ICeadChatService/SendPackageToFileResponse")]
        bool SendPackageToFile(int messageId, Web.ServiceReference1.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendPackageToFile", ReplyAction="http://tempuri.org/ICeadChatService/SendPackageToFileResponse")]
        System.Threading.Tasks.Task<bool> SendPackageToFileAsync(int messageId, Web.ServiceReference1.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetFriends", ReplyAction="http://tempuri.org/ICeadChatService/GetFriendsResponse")]
        Web.ServiceReference1.UserBaseWCF[] GetFriends();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetFriends", ReplyAction="http://tempuri.org/ICeadChatService/GetFriendsResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> GetFriendsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetAvatarUser", ReplyAction="http://tempuri.org/ICeadChatService/SetAvatarUserResponse")]
        bool SetAvatarUser(Web.ServiceReference1.AvatarUserWCF avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetAvatarUser", ReplyAction="http://tempuri.org/ICeadChatService/SetAvatarUserResponse")]
        System.Threading.Tasks.Task<bool> SetAvatarUserAsync(Web.ServiceReference1.AvatarUserWCF avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetAvatarUsers", ReplyAction="http://tempuri.org/ICeadChatService/GetAvatarUsersResponse")]
        Web.ServiceReference1.AvatarUserWCF[] GetAvatarUsers(int[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetAvatarUsers", ReplyAction="http://tempuri.org/ICeadChatService/GetAvatarUsersResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.AvatarUserWCF[]> GetAvatarUsersAsync(int[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetDontReadMessagesFromGroups", ReplyAction="http://tempuri.org/ICeadChatService/GetDontReadMessagesFromGroupsResponse")]
        System.Collections.Generic.Dictionary<int, int> GetDontReadMessagesFromGroups(int[] groupsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetDontReadMessagesFromGroups", ReplyAction="http://tempuri.org/ICeadChatService/GetDontReadMessagesFromGroupsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> GetDontReadMessagesFromGroupsAsync(int[] groupsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ReadAllMessagesInGroup", ReplyAction="http://tempuri.org/ICeadChatService/ReadAllMessagesInGroupResponse")]
        bool ReadAllMessagesInGroup(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ReadAllMessagesInGroup", ReplyAction="http://tempuri.org/ICeadChatService/ReadAllMessagesInGroupResponse")]
        System.Threading.Tasks.Task<bool> ReadAllMessagesInGroupAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ReadAllMessagesInAllGroups", ReplyAction="http://tempuri.org/ICeadChatService/ReadAllMessagesInAllGroupsResponse")]
        bool ReadAllMessagesInAllGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ReadAllMessagesInAllGroups", ReplyAction="http://tempuri.org/ICeadChatService/ReadAllMessagesInAllGroupsResponse")]
        System.Threading.Tasks.Task<bool> ReadAllMessagesInAllGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetAvatarGroup", ReplyAction="http://tempuri.org/ICeadChatService/SetAvatarGroupResponse")]
        bool SetAvatarGroup(Web.ServiceReference1.AvatarGroupWCF avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetAvatarGroup", ReplyAction="http://tempuri.org/ICeadChatService/SetAvatarGroupResponse")]
        System.Threading.Tasks.Task<bool> SetAvatarGroupAsync(Web.ServiceReference1.AvatarGroupWCF avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetAvatarGroups", ReplyAction="http://tempuri.org/ICeadChatService/GetAvatarGroupsResponse")]
        Web.ServiceReference1.AvatarWCF[] GetAvatarGroups(int[] groups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetAvatarGroups", ReplyAction="http://tempuri.org/ICeadChatService/GetAvatarGroupsResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.AvatarWCF[]> GetAvatarGroupsAsync(int[] groups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangeProfileInfo", ReplyAction="http://tempuri.org/ICeadChatService/ChangeProfileInfoResponse")]
        bool ChangeProfileInfo(string displayName, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangeProfileInfo", ReplyAction="http://tempuri.org/ICeadChatService/ChangeProfileInfoResponse")]
        System.Threading.Tasks.Task<bool> ChangeProfileInfoAsync(string displayName, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangePassword", ReplyAction="http://tempuri.org/ICeadChatService/ChangePasswordResponse")]
        bool ChangePassword(string newPassword, string oldPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangePassword", ReplyAction="http://tempuri.org/ICeadChatService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string newPassword, string oldPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LogOut", ReplyAction="http://tempuri.org/ICeadChatService/LogOutResponse")]
        bool LogOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/LogOut", ReplyAction="http://tempuri.org/ICeadChatService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetMessagesBetween", ReplyAction="http://tempuri.org/ICeadChatService/GetMessagesBetweenResponse")]
        Web.ServiceReference1.MessageWCF[] GetMessagesBetween(int groupId, int startIdx, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetMessagesBetween", ReplyAction="http://tempuri.org/ICeadChatService/GetMessagesBetweenResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.MessageWCF[]> GetMessagesBetweenAsync(int groupId, int startIdx, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangeTextInMessage", ReplyAction="http://tempuri.org/ICeadChatService/ChangeTextInMessageResponse")]
        bool ChangeTextInMessage(Web.ServiceReference1.MessageWCF message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/ChangeTextInMessage", ReplyAction="http://tempuri.org/ICeadChatService/ChangeTextInMessageResponse")]
        System.Threading.Tasks.Task<bool> ChangeTextInMessageAsync(Web.ServiceReference1.MessageWCF message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeForRestorePassword", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeForRestorePasswordResponse")]
        bool SendCodeForRestorePassword(string loginOrEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeForRestorePassword", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeForRestorePasswordResponse")]
        System.Threading.Tasks.Task<bool> SendCodeForRestorePasswordAsync(string loginOrEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RestorePassword", ReplyAction="http://tempuri.org/ICeadChatService/RestorePasswordResponse")]
        bool RestorePassword(string loginOrEmail, string recoveryCode, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RestorePassword", ReplyAction="http://tempuri.org/ICeadChatService/RestorePasswordResponse")]
        System.Threading.Tasks.Task<bool> RestorePasswordAsync(string loginOrEmail, string recoveryCode, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeForSetNewEmail", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeForSetNewEmailResponse")]
        bool SendCodeForSetNewEmail(string newEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeForSetNewEmail", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeForSetNewEmailResponse")]
        System.Threading.Tasks.Task<bool> SendCodeForSetNewEmailAsync(string newEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetNewEmail", ReplyAction="http://tempuri.org/ICeadChatService/SetNewEmailResponse")]
        bool SetNewEmail(string recoveryCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SetNewEmail", ReplyAction="http://tempuri.org/ICeadChatService/SetNewEmailResponse")]
        System.Threading.Tasks.Task<bool> SetNewEmailAsync(string recoveryCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveOrExitFromGroup", ReplyAction="http://tempuri.org/ICeadChatService/RemoveOrExitFromGroupResponse")]
        bool RemoveOrExitFromGroup(int groupId, int userIdForRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveOrExitFromGroup", ReplyAction="http://tempuri.org/ICeadChatService/RemoveOrExitFromGroupResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrExitFromGroupAsync(int groupId, int userIdForRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddToBlackList", ReplyAction="http://tempuri.org/ICeadChatService/AddToBlackListResponse")]
        bool AddToBlackList(Web.ServiceReference1.UserBaseWCF user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/AddToBlackList", ReplyAction="http://tempuri.org/ICeadChatService/AddToBlackListResponse")]
        System.Threading.Tasks.Task<bool> AddToBlackListAsync(Web.ServiceReference1.UserBaseWCF user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveFromBlackList", ReplyAction="http://tempuri.org/ICeadChatService/RemoveFromBlackListResponse")]
        bool RemoveFromBlackList(Web.ServiceReference1.UserBaseWCF userIdForRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/RemoveFromBlackList", ReplyAction="http://tempuri.org/ICeadChatService/RemoveFromBlackListResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromBlackListAsync(Web.ServiceReference1.UserBaseWCF userIdForRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetBlackList", ReplyAction="http://tempuri.org/ICeadChatService/GetBlackListResponse")]
        Web.ServiceReference1.UserBaseWCF[] GetBlackList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetBlackList", ReplyAction="http://tempuri.org/ICeadChatService/GetBlackListResponse")]
        System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> GetBlackListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeOnEmail", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeOnEmailResponse")]
        string SendCodeOnEmail(string email, string cookie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/SendCodeOnEmail", ReplyAction="http://tempuri.org/ICeadChatService/SendCodeOnEmailResponse")]
        System.Threading.Tasks.Task<string> SendCodeOnEmailAsync(string email, string cookie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetEmailByCookieAndCode", ReplyAction="http://tempuri.org/ICeadChatService/GetEmailByCookieAndCodeResponse")]
        string GetEmailByCookieAndCode(string cookie, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetEmailByCookieAndCode", ReplyAction="http://tempuri.org/ICeadChatService/GetEmailByCookieAndCodeResponse")]
        System.Threading.Tasks.Task<string> GetEmailByCookieAndCodeAsync(string cookie, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetName", ReplyAction="http://tempuri.org/ICeadChatService/GetNameResponse")]
        string GetName(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetName", ReplyAction="http://tempuri.org/ICeadChatService/GetNameResponse")]
        System.Threading.Tasks.Task<string> GetNameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetGroupName", ReplyAction="http://tempuri.org/ICeadChatService/GetGroupNameResponse")]
        string GetGroupName(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICeadChatService/GetGroupName", ReplyAction="http://tempuri.org/ICeadChatService/GetGroupNameResponse")]
        System.Threading.Tasks.Task<string> GetGroupNameAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICeadChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/CreateChatCallback")]
        void CreateChatCallback(Web.ServiceReference1.GroupWCF group, int creatorId, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/CreateMessageCallback")]
        void CreateMessageCallback(Web.ServiceReference1.MessageWCF message, long hash, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/DeleteMessageCallback")]
        void DeleteMessageCallback(Web.ServiceReference1.MessageWCF message, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/NewLastMessageCallback")]
        void NewLastMessageCallback(Web.ServiceReference1.MessageWCF message, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/AddFriendToGroupCallback")]
        void AddFriendToGroupCallback(Web.ServiceReference1.UserBaseWCF user, Web.ServiceReference1.GroupWCF group, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/RemoveGroupCallback")]
        void RemoveGroupCallback(Web.ServiceReference1.GroupWCF group, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/SetAvatarCallback")]
        void SetAvatarCallback(Web.ServiceReference1.AvatarWCF avatar, Web.ServiceReference1.UserBaseWCF user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/SetAvatarForGroupCallback")]
        void SetAvatarForGroupCallback(Web.ServiceReference1.AvatarWCF avatar, Web.ServiceReference1.GroupWCF group);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/ReadedMessagesCallback")]
        void ReadedMessagesCallback(Web.ServiceReference1.GroupWCF group, Web.ServiceReference1.UserBaseWCF sender, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/SendedPackageCallback")]
        void SendedPackageCallback(int msgId, int numberPackage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/ChangeOnlineStatusCallback")]
        void ChangeOnlineStatusCallback(Web.ServiceReference1.UserBaseWCF user, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/IsOnlineCallback")]
        void IsOnlineCallback(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/ChangeTextInMessageCallback")]
        void ChangeTextInMessageCallback(Web.ServiceReference1.MessageWCF message, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/RemoveOrExitUserFromGroupCallback")]
        void RemoveOrExitUserFromGroupCallback(int groupId, Web.ServiceReference1.UserBaseWCF user, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/LogOutCallback")]
        void LogOutCallback(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/AddUserToBlackListCallback")]
        void AddUserToBlackListCallback(Web.ServiceReference1.UserBaseWCF user, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/RemoveUserFromBlackListCallback")]
        void RemoveUserFromBlackListCallback(Web.ServiceReference1.UserBaseWCF user, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/AddContactCallback")]
        void AddContactCallback(Web.ServiceReference1.UserBaseWCF user, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICeadChatService/RemoveContactCallback")]
        void RemoveContactCallback(Web.ServiceReference1.UserBaseWCF user, string sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICeadChatServiceChannel : Web.ServiceReference1.ICeadChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CeadChatServiceClient : System.ServiceModel.DuplexClientBase<Web.ServiceReference1.ICeadChatService>, Web.ServiceReference1.ICeadChatService {
        
        public CeadChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CeadChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CeadChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CeadChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CeadChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Web.ServiceReference1.UserWCF Connect(string sessionId, string connectionId) {
            return base.Channel.Connect(sessionId, connectionId);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> ConnectAsync(string sessionId, string connectionId) {
            return base.Channel.ConnectAsync(sessionId, connectionId);
        }
        
        public Web.ServiceReference1.UserWCF CheckSession(string session) {
            return base.Channel.CheckSession(session);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> CheckSessionAsync(string session) {
            return base.Channel.CheckSessionAsync(session);
        }
        
        public bool Registration(Web.ServiceReference1.UserWCF newUser) {
            return base.Channel.Registration(newUser);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(Web.ServiceReference1.UserWCF newUser) {
            return base.Channel.RegistrationAsync(newUser);
        }
        
        public bool LoginExist(string login) {
            return base.Channel.LoginExist(login);
        }
        
        public System.Threading.Tasks.Task<bool> LoginExistAsync(string login) {
            return base.Channel.LoginExistAsync(login);
        }
        
        public bool EmailExist(string email) {
            return base.Channel.EmailExist(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailExistAsync(string email) {
            return base.Channel.EmailExistAsync(email);
        }
        
        public Web.ServiceReference1.UserWCF LogIn(string login1, string password, string token) {
            return base.Channel.LogIn(login1, password, token);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserWCF> LogInAsync(string login, string password, string token) {
            return base.Channel.LogInAsync(login, password, token);
        }
        
        public bool CreateGroup(Web.ServiceReference1.UserBaseWCF[] users, string nameGroup) {
            return base.Channel.CreateGroup(users, nameGroup);
        }
        
        public System.Threading.Tasks.Task<bool> CreateGroupAsync(Web.ServiceReference1.UserBaseWCF[] users, string nameGroup) {
            return base.Channel.CreateGroupAsync(users, nameGroup);
        }
        
        public bool CreateChat(Web.ServiceReference1.UserBaseWCF user) {
            return base.Channel.CreateChat(user);
        }
        
        public System.Threading.Tasks.Task<bool> CreateChatAsync(Web.ServiceReference1.UserBaseWCF user) {
            return base.Channel.CreateChatAsync(user);
        }
        
        public Web.ServiceReference1.UserBaseWCF Find(string login) {
            return base.Channel.Find(login);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF> FindAsync(string login) {
            return base.Channel.FindAsync(login);
        }
        
        public Web.ServiceReference1.UserBaseWCF[] FindAll(string login, int count) {
            return base.Channel.FindAll(login, count);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> FindAllAsync(string login, int count) {
            return base.Channel.FindAllAsync(login, count);
        }
        
        public int SendMessage(Web.ServiceReference1.MessageWCF message, long hash) {
            return base.Channel.SendMessage(message, hash);
        }
        
        public System.Threading.Tasks.Task<int> SendMessageAsync(Web.ServiceReference1.MessageWCF message, long hash) {
            return base.Channel.SendMessageAsync(message, hash);
        }
        
        public bool DeleteMessage(Web.ServiceReference1.MessageWCF message) {
            return base.Channel.DeleteMessage(message);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageAsync(Web.ServiceReference1.MessageWCF message) {
            return base.Channel.DeleteMessageAsync(message);
        }
        
        public bool AddFriendsToGroup(Web.ServiceReference1.GroupWCF group, Web.ServiceReference1.UserBaseWCF[] friend) {
            return base.Channel.AddFriendsToGroup(group, friend);
        }
        
        public System.Threading.Tasks.Task<bool> AddFriendsToGroupAsync(Web.ServiceReference1.GroupWCF group, Web.ServiceReference1.UserBaseWCF[] friend) {
            return base.Channel.AddFriendsToGroupAsync(group, friend);
        }
        
        public bool AddFriend(string friend) {
            return base.Channel.AddFriend(friend);
        }
        
        public System.Threading.Tasks.Task<bool> AddFriendAsync(string friend) {
            return base.Channel.AddFriendAsync(friend);
        }
        
        public bool RemoveFriend(Web.ServiceReference1.UserBaseWCF friend) {
            return base.Channel.RemoveFriend(friend);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFriendAsync(Web.ServiceReference1.UserBaseWCF friend) {
            return base.Channel.RemoveFriendAsync(friend);
        }
        
        public Web.ServiceReference1.MessageWCF[] GetMessagesFromGroup(Web.ServiceReference1.GroupWCF group) {
            return base.Channel.GetMessagesFromGroup(group);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.MessageWCF[]> GetMessagesFromGroupAsync(Web.ServiceReference1.GroupWCF group) {
            return base.Channel.GetMessagesFromGroupAsync(group);
        }
        
        public bool RemoveGroup(Web.ServiceReference1.GroupWCF group) {
            return base.Channel.RemoveGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGroupAsync(Web.ServiceReference1.GroupWCF group) {
            return base.Channel.RemoveGroupAsync(group);
        }
        
        public Web.ServiceReference1.Package GetPackageFromFile(int messageId, int packNumber) {
            return base.Channel.GetPackageFromFile(messageId, packNumber);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.Package> GetPackageFromFileAsync(int messageId, int packNumber) {
            return base.Channel.GetPackageFromFileAsync(messageId, packNumber);
        }
        
        public bool SendPackageToFile(int messageId, Web.ServiceReference1.Package package) {
            return base.Channel.SendPackageToFile(messageId, package);
        }
        
        public System.Threading.Tasks.Task<bool> SendPackageToFileAsync(int messageId, Web.ServiceReference1.Package package) {
            return base.Channel.SendPackageToFileAsync(messageId, package);
        }
        
        public Web.ServiceReference1.UserBaseWCF[] GetFriends() {
            return base.Channel.GetFriends();
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> GetFriendsAsync() {
            return base.Channel.GetFriendsAsync();
        }
        
        public bool SetAvatarUser(Web.ServiceReference1.AvatarUserWCF avatar) {
            return base.Channel.SetAvatarUser(avatar);
        }
        
        public System.Threading.Tasks.Task<bool> SetAvatarUserAsync(Web.ServiceReference1.AvatarUserWCF avatar) {
            return base.Channel.SetAvatarUserAsync(avatar);
        }
        
        public Web.ServiceReference1.AvatarUserWCF[] GetAvatarUsers(int[] users) {
            return base.Channel.GetAvatarUsers(users);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.AvatarUserWCF[]> GetAvatarUsersAsync(int[] users) {
            return base.Channel.GetAvatarUsersAsync(users);
        }
        
        public System.Collections.Generic.Dictionary<int, int> GetDontReadMessagesFromGroups(int[] groupsId) {
            return base.Channel.GetDontReadMessagesFromGroups(groupsId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> GetDontReadMessagesFromGroupsAsync(int[] groupsId) {
            return base.Channel.GetDontReadMessagesFromGroupsAsync(groupsId);
        }
        
        public bool ReadAllMessagesInGroup(int groupId) {
            return base.Channel.ReadAllMessagesInGroup(groupId);
        }
        
        public System.Threading.Tasks.Task<bool> ReadAllMessagesInGroupAsync(int groupId) {
            return base.Channel.ReadAllMessagesInGroupAsync(groupId);
        }
        
        public bool ReadAllMessagesInAllGroups() {
            return base.Channel.ReadAllMessagesInAllGroups();
        }
        
        public System.Threading.Tasks.Task<bool> ReadAllMessagesInAllGroupsAsync() {
            return base.Channel.ReadAllMessagesInAllGroupsAsync();
        }
        
        public bool SetAvatarGroup(Web.ServiceReference1.AvatarGroupWCF avatar) {
            return base.Channel.SetAvatarGroup(avatar);
        }
        
        public System.Threading.Tasks.Task<bool> SetAvatarGroupAsync(Web.ServiceReference1.AvatarGroupWCF avatar) {
            return base.Channel.SetAvatarGroupAsync(avatar);
        }
        
        public Web.ServiceReference1.AvatarWCF[] GetAvatarGroups(int[] groups) {
            return base.Channel.GetAvatarGroups(groups);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.AvatarWCF[]> GetAvatarGroupsAsync(int[] groups) {
            return base.Channel.GetAvatarGroupsAsync(groups);
        }
        
        public bool ChangeProfileInfo(string displayName, string login) {
            return base.Channel.ChangeProfileInfo(displayName, login);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeProfileInfoAsync(string displayName, string login) {
            return base.Channel.ChangeProfileInfoAsync(displayName, login);
        }
        
        public bool ChangePassword(string newPassword, string oldPassword) {
            return base.Channel.ChangePassword(newPassword, oldPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string newPassword, string oldPassword) {
            return base.Channel.ChangePasswordAsync(newPassword, oldPassword);
        }
        
        public bool LogOut() {
            return base.Channel.LogOut();
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync() {
            return base.Channel.LogOutAsync();
        }
        
        public Web.ServiceReference1.MessageWCF[] GetMessagesBetween(int groupId, int startIdx, int count) {
            return base.Channel.GetMessagesBetween(groupId, startIdx, count);
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.MessageWCF[]> GetMessagesBetweenAsync(int groupId, int startIdx, int count) {
            return base.Channel.GetMessagesBetweenAsync(groupId, startIdx, count);
        }
        
        public bool ChangeTextInMessage(Web.ServiceReference1.MessageWCF message) {
            return base.Channel.ChangeTextInMessage(message);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTextInMessageAsync(Web.ServiceReference1.MessageWCF message) {
            return base.Channel.ChangeTextInMessageAsync(message);
        }
        
        public bool SendCodeForRestorePassword(string loginOrEmail) {
            return base.Channel.SendCodeForRestorePassword(loginOrEmail);
        }
        
        public System.Threading.Tasks.Task<bool> SendCodeForRestorePasswordAsync(string loginOrEmail) {
            return base.Channel.SendCodeForRestorePasswordAsync(loginOrEmail);
        }
        
        public bool RestorePassword(string loginOrEmail, string recoveryCode, string newPassword) {
            return base.Channel.RestorePassword(loginOrEmail, recoveryCode, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> RestorePasswordAsync(string loginOrEmail, string recoveryCode, string newPassword) {
            return base.Channel.RestorePasswordAsync(loginOrEmail, recoveryCode, newPassword);
        }
        
        public bool SendCodeForSetNewEmail(string newEmail, string password) {
            return base.Channel.SendCodeForSetNewEmail(newEmail, password);
        }
        
        public System.Threading.Tasks.Task<bool> SendCodeForSetNewEmailAsync(string newEmail, string password) {
            return base.Channel.SendCodeForSetNewEmailAsync(newEmail, password);
        }
        
        public bool SetNewEmail(string recoveryCode) {
            return base.Channel.SetNewEmail(recoveryCode);
        }
        
        public System.Threading.Tasks.Task<bool> SetNewEmailAsync(string recoveryCode) {
            return base.Channel.SetNewEmailAsync(recoveryCode);
        }
        
        public bool RemoveOrExitFromGroup(int groupId, int userIdForRemove) {
            return base.Channel.RemoveOrExitFromGroup(groupId, userIdForRemove);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrExitFromGroupAsync(int groupId, int userIdForRemove) {
            return base.Channel.RemoveOrExitFromGroupAsync(groupId, userIdForRemove);
        }
        
        public bool AddToBlackList(Web.ServiceReference1.UserBaseWCF user) {
            return base.Channel.AddToBlackList(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddToBlackListAsync(Web.ServiceReference1.UserBaseWCF user) {
            return base.Channel.AddToBlackListAsync(user);
        }
        
        public bool RemoveFromBlackList(Web.ServiceReference1.UserBaseWCF userIdForRemove) {
            return base.Channel.RemoveFromBlackList(userIdForRemove);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromBlackListAsync(Web.ServiceReference1.UserBaseWCF userIdForRemove) {
            return base.Channel.RemoveFromBlackListAsync(userIdForRemove);
        }
        
        public Web.ServiceReference1.UserBaseWCF[] GetBlackList() {
            return base.Channel.GetBlackList();
        }
        
        public System.Threading.Tasks.Task<Web.ServiceReference1.UserBaseWCF[]> GetBlackListAsync() {
            return base.Channel.GetBlackListAsync();
        }
        
        public string SendCodeOnEmail(string email, string cookie) {
            return base.Channel.SendCodeOnEmail(email, cookie);
        }
        
        public System.Threading.Tasks.Task<string> SendCodeOnEmailAsync(string email, string cookie) {
            return base.Channel.SendCodeOnEmailAsync(email, cookie);
        }
        
        public string GetEmailByCookieAndCode(string cookie, string code) {
            return base.Channel.GetEmailByCookieAndCode(cookie, code);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailByCookieAndCodeAsync(string cookie, string code) {
            return base.Channel.GetEmailByCookieAndCodeAsync(cookie, code);
        }
        
        public string GetName(int id) {
            return base.Channel.GetName(id);
        }
        
        public System.Threading.Tasks.Task<string> GetNameAsync(int id) {
            return base.Channel.GetNameAsync(id);
        }
        
        public string GetGroupName(int id) {
            return base.Channel.GetGroupName(id);
        }
        
        public System.Threading.Tasks.Task<string> GetGroupNameAsync(int id) {
            return base.Channel.GetGroupNameAsync(id);
        }
    }
}
